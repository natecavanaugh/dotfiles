# MySQL
function mysqlexec () {
	mysql -u root -p -e "$1";
}

function createdb () {
	mysqlexec "create database \`$1\` CHARACTER SET utf8;";
}

function dropdb () {
	mysqlexec "drop database if exists \`$1\`;";
}

function cleardb () {
	mysqlexec "drop database if exists \`$1\`; create database \`$1\`
CHARACTER SET utf8;"
}

# Navigation

# ls -l unless we're piping out to another command
function l {
	[[ -t 1 ]] \
		&& $LS_COMMAND --color=tty --time-style="+%m/%d/%Y %I:%M%p" -lgh "$@" \
		|| $LS_COMMAND -1 "$@"
}

function cdl () {
	cd "$1" || return;
	ls -l
}

function upl () {
	up "$@"
	ls -l
}

# Convenience function for moving up levels in the path to the current working directory.
# Synopsis:
#     `up [n]` moves n levels up in the directory hierarchy; default is 1.
#     `up dirname` changes to the closest ancestral directory by that name, regardless of case.
#     `up absolutepath` changes to the specified absolute path; primarily used with command completion (see below).
# Additionally, if command completion via _complete_up() is in effect (<tab> represents pressing the tab key):
#      `up [n]<tab>` replaces n with the absolute path of the directory n levels up (default is 1).
#      `up dirnameprefix<tab>` replaces dirnameprefix with the absolute path of the closest ancestral directory whose name starts with the specified name prefix, terminated with '/'.
#         Whether dirnameprefix is matched case-insensitively or not depends on whether case-insensitive command completion is turned on globally via ~/.inputrc or /etc/inputrc.
#       In both cases the completed absolute path ends in '/', allowing you to optionally continue completion based on that path's subdirectories.
# Notes:
#   - Directory names with characters that need escaping when unquoted (such as spaces) are handled correctly.
#   - For command completion, to specify names that need escaping when unquoted, specify them escaped rather than quoted;
#     e.g., `up my \di<tab>' to match 'my dir' in the ancestral path.
function up () {

	local dir strpath wdLower tokenLower newParentDirLower targetDirPathLength

	dir='../'   # By default, go up 1 level.

	[[ "$1" == '-h' || "$1" == '--help' ]] && { echo -e "usage:\n\t${FUNCNAME[0]} [n]\n\t${FUNCNAME[0]} dirname\n  Moves up N levels in the path to the current working directory, 1 by default.\n  If DIRNAME is given, it must be the full name of an ancestral directory (case does not matter).\n  If there are multiple matches, the one *lowest* in the hierarchy is changed to." && return 0; }

	if [[ -n "$1" ]]; then
		if [[ $1 =~ ^[0-9]+$ ]]; then   # A number, specifying the number of levels to go up.
			strpath=$( printf "%${1}s" ) # This creates a string with as many spaces as levels were specified.
			dir=${strpath// /$dir}  # Create the go-up-multiple-levels cd expression by replacing each space with '../'
		elif [[ $1 =~ ^/ ]]; then  # Already an absolute path? Use as is. (Typically, this happens as a result of command-line completion invoked via _complete_up().)
			dir=$1
		else # Assumed to be the full name of an ancestral directory (regardless of level), though the case needn't match.
			# Note: On case-insensitive HFS+ volumes on a Mac (the default), you can actually use case-insensitive names with 'cd' and the resulting working directory will be reported in that case(!).
			#       This behavior is NOT related to whether case-insensitivity is turned on for command completion or not.
			# !! Strangely, the 'nocasematch' shopt setting has no effect on variable substitution, so we need to roll our own case-insensitive substitution logic here.
			wdLower=$(echo -n "$PWD" | tr '[:upper:]' '[:lower:]')
			tokenLower=$(echo -n "$1" | tr '[:upper:]' '[:lower:]')
			newParentDirLower=${wdLower%/$tokenLower/*}   # If the specified token is a full ancestral directory name (irrespective of case), this substitution will give us its parent path.
			[[ "$newParentDirLower" == "$wdLower"  ]] && { echo "${FUNCNAME[0]}: No ancestral directory named '$1' found." 1>&2; return 1; }
			targetDirPathLength=$(( ${#newParentDirLower} + 1 + ${#tokenLower} ))
			# Get the target directory's name in the exact case it's defined.
			dir=${PWD:0:$targetDirPathLength}
		fi
	fi

	# if we're not piping to another command
	# Change to target directory; use of 'pushd' allows use of 'popd' to return to previous working directory.
	# Otherwise, if we are piping, then only print out the name of the file (allows for just being able to reference a parent dir easily)
	[[ -t 1 ]] && pushd "$dir" 1>/dev/null || echo "$dir"
}

# Companion function to up(), used for command completion.
# To install it, run (typically in your bash profile):
# `complete -o filenames -F _complete_up up`
# Note: The '-o filenames' option ensures that:
#   (a) paths of directories returned via $COMPREPLY leave the cursor at the terminating "/" for potential further completion
#   (b) paths with embeddes spaces and other characters requiring \-escaping are properly escaped.
function _complete_up () {
	local IFS caseInsensitive combined_token curToken dir matchingPath name nocasematchWasOff ordered_token parentPath pathSoFar strpath trailingpath unordered_token upDirSpec

	COMPREPLY=() # Initialize the array variable through which completions must be passed out.

	# Retrieve the current command-line token, i.e., the one on which completion is being invoked.
	curToken=${COMP_WORDS[COMP_CWORD]}
	# Remove \ chars., presumed to be escape characters in the current token, which is presumed to be *unquoted*. This allows invoking completion on a token with embedded space, e.g., '$FUNCNAME some\ directory'
	# !! Strictly speaking, we'd have to investigate whether the token was specified with quotes on the command line and, if quoted,  NOT unescape. Given that the purpose of this function is expedience, we
	# !! assume that the token is NOT quoted and that all backslashes are therefore escape characters to be removed.
	curToken=${curToken//'\'}

	if [[ $curToken =~ ^/ ]]; then # Token is an absolute path (typically as a result of a previous completion) -> complete with directory names, similar to 'cd' (although the latter, curiously, also completes *file* names).

		IFS=$'\n' # Make sure that the output of compgen below is only split along lines, not also along spaces (which the default $IFS would do).
		COMPREPLY=($(compgen -o dirnames -- "$curToken"))

	elif [[ $curToken =~ ^[0-9]+/? ]]; then # Token is a number (optionally followed by a slash) -> replace the token to be completed with the absolute path of the directory N levels above, where N is the number specified.

		# Create a go-up-multiple-levels cd expression that corresponds to the number of levels specified.
		strpath=$( printf "%${curToken%%/*}s" ) # This creates a string with as many spaces as levels were specified.
		upDirSpec=${strpath// /../}  # Create the go-up-multiple-levels cd expression by replacing each space with '../'

		trailingpath="${curToken#*/}"

		if [[ $trailingpath =~ ^[0-9]+$ ]]; then
			trailingpath=""
		fi

		# Expand to absolute path (ending in '/' to facilitate optional further completion) and return.
		dir=$(cd "$upDirSpec"; echo -n "$PWD/")

		if [[ "$dir" == '//' ]]; then dir='/'; fi # In case the target dir turns out to be the root dir, we've accidentally created '//' in the previous statement; fix it.
		# !! Note that the path will appear *unquoted* on the command line and must therefore be properly \-escaped (e.g., a ' '  as '\ ').
		# !! Escaping is performed automatially by virtue of defining the compspec with '-o filenames' (passed to 'complete').

		dir="$dir"

		# If we had started with something like up 2/mydir then let's add back the /mydir
		if [[ -n $trailingpath ]]; then
			# And check if we have a slash at the beginning
			if [[ "${trailingpath:0:1}" != "/" && "${dir: -1}" != "/" ]]; then
				trailingpath="/$trailingpath"
			fi

			#dir="${dir}${trailingpath}"

			# dir="$(compgen -o dirnames -- "$dir")"

			fullpathdir="${dir}${trailingpath}"

			matches=$(compgen -o dirnames -- "$fullpathdir")

			if [[ -n $matches ]]; then
				dir=$matches
			fi
		fi

		COMPREPLY=("$dir")
	else # Token is a name -> look for a prefix match among all the ancestral path components; use the first match found (i.e., the next match up in the hierarchy).

		# Determine if we should do case-insensitive matching or not, depending on whether cases-insensitive completion was turned on globally via ~/.inputrc or /etc/inputrc.
		# We do this to be consistent with the default command completion behavior.
		caseInsensitive=0
		bind -v | grep -E '\bcompletion-ignore-case[[:space:]]+on\b' &>/dev/null && caseInsensitive=1

		# If we need to do case-INsensitive matching in this function, we need to make sure the 'nocasematch' shell option is (temporarily) turned on.
		nocasematchWasOff=0
		if (( caseInsensitive )); then
			nocasematchWasOff=1
			shopt nocasematch >/dev/null && nocasematchWasOff=0
			(( nocasematchWasOff )) && shopt -s nocasematch >/dev/null
		fi

		pathSoFar=''
		matchingPath=()
		# Note: By letting the loop iterate over ALL components starting at the root, we end up with the *last* match, i.e. the one *lowest* in the hierarchy (closed to the current working folder).
		# !! We COULD try to return multiple matches, if applicable, but in practice we assume that there'll rarely be paths whose components have identical names or prefixes.
		# !! Thus, should there be multiple matches, the user can reinvoke the same command to change to the next-higher match (though the command must be typed again), and so forth.
		parentPath=${PWD%/*}
		IFS='/' # This will break our parent path into components in the 'for' loop below.
		name
		ordered_token=$(sed -r 's#(.)#\1.*#g' <<< "$curToken")
		unordered_token=$(sed -r 's#(.)#(?=.*\1)#g' <<< "$curToken")
		combined_token=$(sed -r 's#(.)#(?:\1.*(?=.*\1))#g' <<< "$curToken")

		# log "$combined_token"

		for name in ${parentPath:1}; do
			pathSoFar+=/$name
			if [[ "$name" == *"$curToken"* ]] || grep -iqP "$ordered_token|$unordered_token" <<< "$name"; then
				# Appends to the array
				matchingPath+=("$pathSoFar/")
				# Prepends to the array
				# matchingPath=("$pathSoFar/" "${matchingPath[@]}")
			fi
		done

		# log "${matchingPath[@]}"

		# Restore the state of 'nocasematch', if necessary.
		(( caseInsensitive && nocasematchWasOff )) && shopt -u nocasematch >/dev/null

		# If match was found, return its absolute path (ending in / to facilitate optional further completion).
		# !! Note that the path will appear *unquoted* on the command line and must therefore be properly \-escaped (e.g., a ' '  as '\ ').
		# !! Escaping is performed automatially by virtue of defining the compspec with '-o filenames' (passed to 'complete').
		[[ -n "${matchingPath[@]}" ]] && COMPREPLY=("${matchingPath[@]}")
	fi

	return 0
}

#Assign the auto-completion function _get for our command get.
complete -o plusdirs -o nospace -o filenames -F _complete_up up
complete -o plusdirs -o nospace -o filenames -F _complete_up upl

# Delete current directory
function dlc () {
	curr_dir="$PWD"
	# curr_dir="$(pwd -P)"
	if [[ "$1" == "!" ]]; then
		delete_dir="y"
	else
		read -p "Are you sure you want to delete $PWD? [y/N]: " delete_dir
	fi

	if [[ "$delete_dir" =~ [Yy] ]]; then
		echo "Deleting $curr_dir"
		cd ../ && rm -rf "$curr_dir"
	fi
}

# Make a directory and cd into it
function mcd () {
	mkdir "$1" && cd "$1"
}

function le () {
	perl -p -e '$_ = "$. $_"; s[\r\n][WIN\n]; s[(?<!WIN)\n][UNIX\n]; s[\r][MAC\n];' "${1:-*}"
}

function showle () {
	perl -p -e 's[\r\n][\\r\\n\n]; s[(?<!WIN)\n][\\n\n]; s[\r][\\r\n];' "${1:-*}"
}

function le2u () {
	perl -pi -e 's#\r\n#\n#' "${1:-*}"
}

function le2w () {
	perl -pi -e 's#\n#\r\n#' "${1:-*}"
}

# Process finder
# @argument name of process
function pf () {
	args="ps ax | grep '$1'"
	shift

	while test $# -gt 0
	do
		args="$args | grep '$1'"
		shift
	done

	args="$args | grep -v grep | awk '{ print \$1 }'"

	eval "$args"
	# ps ax | grep "$1" | grep -v grep | awk '{ print $1 }'
}

# Process killer
# @argument name of process
function pfkill () {
	pf "$@" | xargs kill -9
	#ps -ef | grep PROCESS | grep -v grep | awk '{print $2}' | xargs kill -9
}

# Kill java :(
function pfkj () {
	pfkill "java"
}

# Simpler grep
# @argument (optional) path
function gr () {
	if [[ -t 0 ]]; then
		grep -Rn "$1" "${2:-.}" --exclude-dir="\.git" --color=auto
	else
		less <&0 2>/dev/null | grep "$1" "${@:2}"
	fi

	# echo $1 ${2:.}
}

# Set up simple server
function server () {
	local port

	port="9000"

	if [[ -n "$1" && "$1" != "-"* ]]; then
		port="$1"
		shift
	fi

	http-server -p $port --cors -o $@;
	# open "http://localhost:${port}" && python -m SimpleHTTPServer $port 2>/dev/null;
}

# Functions

# Find file by name
# alias fn='find . -name '

function fn () {
	local args
	args=". -name '$1'"
	shift

	while test $# -gt 0
	do
		args="$args -o -name '$1'"
		shift
	done

	eval find "$args"
}

function fnz () {
	local args
	nl=$'\n'
	while test $# -gt 0
	do
		if [[ $1 == '--' ]]; then
			echo "found it"
		fi
		args="$args arg:  $1 $nl"
		shift
	done

	echo "$args"
}

# Resolves a symlink to determine where it points to
# @argument path to symlink

function resolve () {
	[ ! -h "$1" ] && echo "$1" || (local link="$(expr "$(command ls -ld -- "$1")" : '.*-> \(.*\)$')"; cd $(dirname $1); resolve "$link" | sed "s|^\([^/].*\)\$|$(dirname $1)/\1|");
}

# Do a checksum comparison of two files to verify if
# two files are 100% equal. Useful for testing if
# one file has some invisible character or imperceptible
# difference.
# @argument first file
# @argument second file

function compare () {
	local file_1 file_2
	if [[ -f "$1" && -f "$2" ]]; then
		file_1=$(md5 "$1" | sed "s#$1#_#" | awk '{ print $4 }')
		file_2=$(md5 "$2" | sed "s#$2#_#" | awk '{ print $4 }')

		if [[ $file_1 == $file_2 ]]; then
			echo "Both files are equal ($file_1)"
		else
			echo "$1 ($file_1) is different from $2 ($file_2)"
		fi
	else
		echo "One or both of these is not a file"
	fi
}

# Navigate to the portal-web directory of any Liferay repo

function pr () {
	local top_level

	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	if [[ -n "$top_level" && -d "$top_level" ]]; then
		cd "$top_level"
	else
		echo "Nowhere to go..."
		return 1;
	fi
}

# Navigate to the portal-web directory of any Liferay repo

function pw () {
	local top_level

	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	if [[ -n "$top_level" && -d "$top_level/portal-web" ]]; then
		cd "$top_level/portal-web"
	else
		echo "Nowhere to go..."
		return 1;
	fi
}

# Navigate to the modules/frontend/ directory of any Liferay repo

function __fw_get_path () {
	local top_level fw_module

	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	fw_module="$top_level/modules/frontend"

	echo "$fw_module"
}

function fw () {
	local top_level fw_module

	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	fw_module="$(__fw_get_path)/$1"

	if [[ -n "$top_level" && -d "$fw_module" ]]; then
		cd "$fw_module"
	else
		echo "Nowhere to go..."
		return 1;
	fi
}

function _complete_fw () {
	local curToken fw_module initialToken found

	fw_module=$(__fw_get_path)
	curToken=${COMP_WORDS[COMP_CWORD]}

	initialToken="$curToken"

	# echo ""
	# echo "---------"
	# echo "$curToken"
	# echo "---------"
	# echo ""

	if [[ "$curToken" == */* ]]; then
		fw_module="$fw_module/${curToken%/*}"
		curToken="${curToken##*/}"
	fi

	# echo "$fw_module"
	found="$(cd $fw_module && (ls -1p | grep '/$' | tr -d /) | grep -i "$curToken")"



	if [[ "$initialToken" == */* ]]; then
		found="${initialToken%/*}/$found"
	fi

	# found=$(echo "$found" | tr $'\n' ' ')

	# local IFS=$'\n'

	COMPREPLY=($found)
	return 0
	# COMPREPLY=($(compgen -o dirnames -- "$curToken"))
	# COMPREPLY=( $( (ls -1p | grep '/$' | tr -d /) | grep "\<$cur.*" ) )
}

complete -o plusdirs -o nospace -o dirnames -F _complete_fw fw

# Navigate to the modules/frontend/frontend-js-web directory of any Liferay repo

function fwj () {
	fw "frontend-js-web/src/META-INF/resources/"
}

# Navigate to the modules/frontend/frontend-js-web directory of any Liferay repo

function fwc () {
	fw "frontend-css-web/src/META-INF/resources/"
}

# Navigate to the modules/frontend/frontend-js-web directory of any Liferay repo

function fwt () {
	fw "frontend-theme/"
}

# Navigate to the portal-impl directory of any Liferay repo

function pi () {
	local top_level

	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	if [[ -n "$top_level" && -d "$top_level/portal-impl" ]]; then
		cd "$top_level/portal-impl"
	else
		echo "Nowhere to go..."
		return 1;
	fi
}

# Navigate to the portal-web directory and run ant build-themes

function abt () {
	local start_dir="$PWD"

	pw && ant build-themes

	if [[ "$PWD" != "$start_dir" ]]; then
		cd "$start_dir";
	fi
}

# Navigate to the portal-web directory and run ant build-alloy

function aba () {
	local start_dir

	start_dir="$PWD"

	pw;

	if [[ $? == 0 ]]; then
		touch -c third-party/alloy-*.zip && abaf;
	fi

	if [[ "$PWD" != "$start_dir" ]]; then
		cd "$start_dir";
	fi
}

# Navigate to the portal-impl (or the root of the project) directory and run ant format-source

function afs () {
	local start_dir

	start_dir="$PWD"

	{ pi || pr; } 1>/dev/null

	local lastcmd="$?"

	if [[ "$lastcmd" == 0 && -f "build.xml" ]]; then
		grep -q 'format-source' build*.xml && ant format-source
	else
		echo "not there"
	fi

	if [[ "$PWD" != "$start_dir" ]]; then
		cd "$start_dir";
	fi
}

# Navigate to the portal-impl (or the root of the project) directory and run ant format-source-current-branch

function afs () {
	local start_dir lastcmd

	start_dir="$PWD"

	{ pi || pr; } 1>/dev/null

	lastcmd="$?"

	if [[ "$lastcmd" == 0 && -f "build.xml" ]]; then
		grep -q 'format-source-current-branch' build*.xml && ant format-source-current-branch
	else
		echo "not there"
	fi

	if [[ "$PWD" != "$start_dir" ]]; then
		cd "$start_dir";
	fi
}

# Check any website to see if it is running on Liferay
# as well as what version it is.
# This assumes they haven't disabled the Liferay-Portal header
# @argument url

function lfrv () {
	curl -ILs $1 | grep --color=auto "Liferay"
}

function finda () {
	local terminal_open terminal_close

	terminal_open="%10s"
	if [[ -t 1 ]]; then
		terminal_open="\033[31m${terminal_open}\033[1;37m"
		terminal_close="\033[0;39m"
	fi

	alias | grep -i "$1" | sed -E "s/^alias ([^=]+)='(.*)'/\1 \2/" | awk -v nr=2 -v termo="$terminal_open" -v termc="$terminal_close" '{printf termo, $1};{sep=FS};{for (x=nr; x<=NF; x++) {printf "%s%s", sep, $x; }; print termc}';
}

function right () {
	printf '%*s' $(tput cols) "$@"
}

function rule () {
	printf -v _hr "%*s" $(tput cols) && echo ${_hr// /${1--}}
}

function rulem  () {
	if [ $# -eq 0 ]; then
		echo "Usage: rulem MESSAGE [RULE_CHARACTER]"
		return 1
	fi
	# Fill line with ruler character ($2, default "-"), reset cursor, move 2 cols right, print message
	printf -v _hr "%*s" $(tput cols) && echo -en ${_hr// /${2--}} && echo -e "\r\033[2C$1"
}

NC_SUBLIME_BIN="${NC_SUBLIME_BIN}"

if [[ -z "$NC_SUBLIME_BIN" ]]; then
	NC_SUBLIME_BIN="/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"

	for path in '' $HOME; do
		if [[ -e "${path}$NC_SUBLIME_BIN" ]]; then
			NC_SUBLIME_BIN="${path}$NC_SUBLIME_BIN"
			break
		fi
	done
fi

function get_package_json {
	local file

	file="$1"

	if [[ -f "$file" && "$file" != *"package.json" ]]; then
		file=$(dirname "$file")
	fi

	if [[ -f "$file/package.json" ]]; then
		echo "$file/package.json"
	fi
}

function nmv {
	local file version pkg

	file="$(realpath $1)"



	if [[ -f "$file" && "$file" != *"package.json" ]]; then
		file=$(dirname "$file")
	fi

	# if [[ -d "$file" ]]; then
	# 	if [[ -f "$file/package.json" ]]; then
	# 		pkg="$file/package.json"
	# 	fi
	# else

	# fi

	if [[ -d "$file" && -f "$file/package.json" ]]; then
		pkg="$file/package.json"
	elif [[ ! -d "$file" ]]; then
		# Could be a global node_module?
		local file_path=$(command -v "$file")

		if [[ -e "$file_path" ]]; then
			if [[ -f "$file_path" ]]; then
				file=$(dirname "$file_path")
			fi

			if [[ -f "$file/package.json" ]]; then
				pkg="$file/package.json"
			fi
		fi
	fi

	if [[ -f "$pkg" ]]; then
		version=$(node -e "var pkg = require('$pkg'); console.log(pkg.version);")
	fi

	echo "${version:-Couldn\'t determine the version of $file}"
}

# Shortcut to SublimeText cli
function so () {
	local -a args

	# read args <&0
	# args=$(cat)
	# local OIFS="$IFS"
	# local NL=$'\n'
	# local IFS=

	[[ -t 0 ]] && args+=("$@") || args+=($(less <&0 2>/dev/null))

	"$NC_SUBLIME_BIN" "${args[@]}"

	# IFS="$OIFS"

	# echo "arr: ${#args[@]}: ${args[@]}"
	# echo "str: ${#args}: ${args}"

	# echo "${args[@]}" | wc -l


	# if [[ -z "$args" ]]; then
	# 	echo "\$args not set"
	# else
	# 	echo "\$args is set to $args"
	# 	echo "-${args}- ${#args}"
	# 	args=($args)
	# 	echo "\$args[@] is set to ${args[@]}"
	# 	echo "-${args[@]}- ${#args[@]}"
	# 	echo -${args[@]}- ${#args[@]}
	# fi
	# [[ -t 0 ]] && args=("$@") || args=$(less <&0 2>/dev/null)

	# "$NC_SUBLIME_BIN" "${args[@]}"
	# echo "-"${args[@]}"-" ${#args[@]}

	# local NONE='<NONE>'
	# local args="$NONE"
	# [[ -t 0 ]] && args=("$@") || stdin=($(less <&0 2>/dev/null))
	# echo "functions:561, |args|: |${args[@]}|"
	# echo "functions:562, |stdin|: |${stdin[@]}|"
	# if [[ "$args" != "$NONE" ]]; then
	# 	echo "functions:564, # args: ${#args[@]}"
	# elif [[ "$stdin" != "$NONE" ]]; then
	# 	echo "functions:567, # |stdin[@]|: |${stdin[@]}|, and |stdin|: |${stdin}|"
	# 	echo "functions:568, # stdin: ${#stdin[@]}"
	# 	echo "functions:569, # stdin: ${#stdin}"
	# fi
	# # Read from argument or stdin
	# args="${1:-$(less <&0 2>/dev/null)}"
	# ~/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl
}

function realpath {
	perl -e "use Cwd qw(realpath);print realpath('$1');"
}

function details_realpath {
	local file_path tmp_file_path

	file_path="$1"

	if [[ "$file_path" == *$'\n'* ]]; then
		tmp_file_path=$(while read line; do echo $(realpath "$line"); done <<<"$file_path")
	else
		tmp_file_path=$(realpath "$file_path")
	fi
	# if [[ "$file_path" == *$'\n'* ]]; then
	# 	tmp_file_path=$(while read line; do python -c "import os,sys; print os.path.realpath(sys.argv[1])" "$line"; done <<<"$file_path")
	# else
	# 	tmp_file_path=$(python -c "import os,sys; print os.path.realpath(sys.argv[1])" "$file_path")
	# fi

	# if command -v greadlink > /dev/null; then
	# 	tmp_file_path=$(greadlink -f "$file_path")
	# else
		# tmp_file_path=$(readlink -f "$file_path" 2> /dev/null)

		# if [[ -z "$tmp_file_path" ]]; then
		# 	tmp_file_path=$(python -c "import os,sys; print os.path.realpath(sys.argv[1])" "$file_path")
		# fi
	# fi

	echo "${tmp_file_path:-$file_path}"
}

function details () {
	local OPTIND OPTARG OPTION

	OPTIND=1

	usage()
	{
		cat <<EOF
usage: $0 options

details
Shows either the variable value, file name, alias info, or function definition
for a given executable.
@argument name of variable, function, alias, or script to list the details for

OPTIONS:
   -h      Show this message
   -r      Resolve a symlink or an alias
EOF
	}

	local RESOLVE

	RESOLVE=0

	local -a ARGS;

	while getopts ":hr" OPTION
	do
		case $OPTION in
			h)
				usage
				return
				;;
			r)
				RESOLVE=1
				;;
			?)
				usage
				return
				;;
		esac
	done
	shift $(($OPTIND - 1))

	local NO_EXIST

	local -a OUTPUT

	NO_EXIST="$1 doesn't seem to exist"

	if [[ $(command -v "$1") && ( ! -e "$1" || $RESOLVE == 0 ) ]]; then
		local cmd_type

		cmd_type="$(type -t "$1")"

		if [[ $cmd_type == "alias" ]]; then
			local ref

			ref=$(alias "$1" 2> /dev/null)
			if [[ $RESOLVE == 1 ]]; then
				alias_cmd="$(sed -re "s/alias "$1"='(\S+).*'$/\1/" <<< "$ref")"
				alias_cmd=$(echo "$alias_cmd" | sed 's/\$//')

				if [[ "$alias_cmd" == "$1" ]]; then
					alias_cmd=$(which "$alias_cmd")
				fi
				# echo "alias_cmd: $alias_cmd"
				OUTPUT+=("$(details -r "$alias_cmd")")
			else
				OUTPUT+=("$ref")
			fi
		elif [[ $cmd_type == "file" ]]; then
			local file_path

			file_path=$(which -a "$1" 2> /dev/null | sort | uniq)

			if [[ $RESOLVE == 1 ]]; then
				file_path=$(details_realpath "$file_path")
				# local tmp_file_path

				# if [[ "$file_path" == *$'\n'* ]]; then
				# 	tmp_file_path=$(while read line; do realpath "$line"; done <<<"$file_path")
				# else
				# 	tmp_file_path=$(realpath "$file_path")
				# fi
				# # if [[ "$file_path" == *$'\n'* ]]; then
				# # 	tmp_file_path=$(while read line; do python -c "import os,sys; print os.path.realpath(sys.argv[1])" "$line"; done <<<"$file_path")
				# # else
				# # 	tmp_file_path=$(python -c "import os,sys; print os.path.realpath(sys.argv[1])" "$file_path")
				# # fi

				# # if command -v greadlink > /dev/null; then
				# # 	tmp_file_path=$(greadlink -f "$file_path")
				# # else
				# 	# tmp_file_path=$(readlink -f "$file_path" 2> /dev/null)

				# 	# if [[ -z "$tmp_file_path" ]]; then
				# 	# 	tmp_file_path=$(python -c "import os,sys; print os.path.realpath(sys.argv[1])" "$file_path")
				# 	# fi
				# # fi

				# file_path="${tmp_file_path:-$file_path}"
			fi

			OUTPUT+=("$file_path")
		elif [[ $cmd_type == "function" ]]; then
			OUTPUT+=("$(declare -f "$1" 2> /dev/null)")
			shopt -s extdebug
			OUTPUT+=("$(declare -F "$1")")
			shopt -u extdebug
		else
			OUTPUT+=("$(type -a "$1" 2> /dev/null)")
		fi
	fi
	if [[ "$1" == */* || -e "$1" ]]; then
		# local path=$(python -c "import os,sys; print os.path.realpath(sys.argv[1])" "$1")
		local path

		path=$(python -c "import os,sys; print os.path.abspath(sys.argv[1])" "$1")
		# local path=$(node -pe "require('path').resolve(process.argv[1]);" "$1")

		if [[ -e "$path" ]]; then
			# echo "$path is a file"
			# ls -ldGhg --time-style="+%m/%d/%Y %r" "$path"

			if [[ $RESOLVE == 1 ]]; then
				path=$(details_realpath "$path")
			fi

			OUTPUT+=("$(ls -ldGhg --time-style="+%m/%d/%Y %I:%M%p" --color=always "$path" | cut -f1,4- -d' ')")
		else
			path="${path%/*}"

			while [[ ! -e "$path" && "$path" == */* ]]; do
				path="${path%/*}"
			done

			if [[ -e "$path" && -n "$path" ]]; then
				OUTPUT=("${NO_EXIST}. The nearest directory is $path")
			else
				OUTPUT=("$NO_EXIST")
			fi
		fi
	fi

	# let's check if it's a variable
	if [[ "$1" != */*  && -n ${!1+x} ]]; then
		OUTPUT+=("\$$1 is a variable set to: ${!1}")
	fi

	local retval

	if [[ "${#OUTPUT[@]}" -gt 0 ]]; then
		local IFS STR
		IFS=''

		if [[ $BASH_SUBSHELL == 0 ]]; then
			# STR='%s\n'
			# printf '%s\n' "${OUTPUT[@]}" | perl -0777 -pe 's/\n\n/=/g'
			printf '%s\n' "${OUTPUT[@]}" | perl -0777 -pe 's/\n{2,}/=/g'
		else
			printf '%s' "${OUTPUT[@]}"
			# printf '%s' "${OUTPUT[@]}" | grep -c '$'
		fi

		# for x in ${OUTPUT[@]}; do echo "--$x--"; done;
		# (IFS=$'\n'; echo "${OUTPUT[*]}" )
		# printf "$STR" "${OUTPUT[@]}"
		# printf "$STR" "${OUTPUT[@]}" | perl -0777 -pe 's/\n\n/=/g'
		# [[ -t 1 ]] && echo "yes" || echo "no"
		# echo "$BASH_SUBSHELL"
		retval=0
	elif [[ $BASH_SUBSHELL == 0 ]]; then
		#statements
		echo "$NO_EXIST"
		retval=1
	fi

	return $retval
}

# alias d='details'
function d {
	details $@
}
export -f details
export -f d

# add autocompletion for details and it's alias
complete -c -v -f details
complete -c -v -f d

# function foo {
# 	local OPTIND=1 RESOLVE=0 i=0 x
# 	for x in $@; do
# 		if [[ $x == -* ]]; then
# 			x="${x#-}"

# 			case "$x" in
# 				h)
# 					echo "quitting early: $x"
# 					return
# 					;;
# 				r)
# 					RESOLVE=1
# 					shift $(($OPTIND - 1))
# 					;;
# 				?)
# 					echo "quitting early: $x"
# 					return
# 					;;
# 			esac
# 		fi
# 		echo "--$x--";
# 	done
# 		echo "RESOLVE: --$RESOLVE--";
# }