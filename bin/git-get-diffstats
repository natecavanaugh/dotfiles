#!/bin/bash

usage()
{
cat << EOF
usage: $0 options

This script will list the difference stats between two git commits

OPTIONS:
	-h	Show this message
	-f	Show the filenames that were modified
	-m	Only show modified files (ignores deleted files)
	-r	Show the filenames that were modified relative to the current directory
EOF
}

IGNORE_DELETES=0
NAMES=0
RELATIVE=0
# PATH_PREFIX=''

if [[ "$NC_RENDER_ABSOLUTE_PATHS" == 1 ]]; then
	PATH_PREFIX=''
fi

while getopts ":hrfmp:" OPTION
do
	case $OPTION in
		h)
			usage
			exit 1
			;;
		f)
			NAMES=1
			;;
		p)
			[[ "$OPTARG" != "--" ]] && PATH_PREFIX="${OPTARG}" || PATH_PREFIX=""
			;;
		m)
			IGNORE_DELETES=1
			;;
		r)
			RELATIVE=1
			;;
		?)
			usage
			exit
			;;
	esac
done
shift $(($OPTIND - 1))

ref_spec=$1


if [[ $NAMES == 0 ]]; then
	git diff --stat $ref_spec
else
	diff_cmd="git diff --name-status $ref_spec"

	if [[ $IGNORE_DELETES == 1 ]]; then
		diff_cmd="$diff_cmd | grep -vE '^D'"
	fi

	top_level=$(git rev-parse --show-toplevel)
	diff_cmd="$diff_cmd | cut -f2-"

	files=$(eval $diff_cmd)

	if [[ $RELATIVE == 0 ]]; then
		# was set, may or may not be empty
		if [[ -n "${PATH_PREFIX+x}" ]]; then
			# has a value
			if [[ -n "$PATH_PREFIX" ]]; then
				PATH_PREFIX=$({ cd "$PATH_PREFIX" && pwd; } 2>/dev/null)

				# PATH_PREFIX="$top_level/$(cd $PATH_PREFIX)"
			fi

			if [[ -z "$PATH_PREFIX" ]]; then
				PATH_PREFIX="$top_level"
			fi

			# echo "$top_level"

			files=$(echo "$files" | sed -E "s#^#${PATH_PREFIX%/}/#")
		fi

		echo "$files"
	else
		# for file in $files; do
		# 	python -c "import os.path; print os.path.relpath('$top_level/$file', '$PWD')"
		# done

		python -c "import os.path; pwd = '$GIT_PREFIX'; top_level = '$top_level'; files = '''$files'''; files = files.split('\n'); print '\n'.join([os.path.relpath('$top_level/' + i, pwd) for i in files])"
	fi
fi