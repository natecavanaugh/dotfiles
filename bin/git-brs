#!/bin/bash

usage()
{
cat << EOF
usage: $0 options

This script will open the files in the specified commit range

OPTIONS:
   -r      Show only remote branches
   -n      Allows to filter the remote branches by name
   -a      Show remotes and local branches
   -d      Show in descending order
   -m      Show brances where my email is the on the latest commit
   -e      Show brances where the specified email is on the latest commit
   -p      Show the branches without formatting
EOF
}

REMOTES_ONLY=0
REMOTE_NAME=""
ALL=0
FORMAT=1
DESC=""
EMAIL_FILTER=""

while getopts ":hrn:adpme:" OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         a)
             ALL=1
             ;;
         r)
             REMOTES_ONLY=1
             ;;
         n)
             REMOTES_ONLY=1
             REMOTE_NAME=$OPTARG
             ;;
         d)
             DESC="-"
             ;;
         m)
             EMAIL_FILTER=$(git config user.email)
             ;;
         e)
             EMAIL_FILTER=$OPTARG
             ;;
         p)
             FORMAT=0
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

branches=refs/heads/

if [[ $ALL == 1 ]]; then
	branches="$branches  refs/remotes"
elif [[ $REMOTES_ONLY == 1 ]]; then
	branches="refs/remotes/$REMOTE_NAME"
fi

CYAN=""
GREEN=""
RESET=""
YELLOW=""

if [[ $FORMAT == 1 ]]; then
    CYAN="\033[36m"
    GREEN="\033[32m"
    RESET="\033[39m"
    YELLOW="\033[33m"
fi

results=$(git for-each-ref --sort=${DESC}committerdate $(echo $branches) --format='%(refname) - %(committerdate:relative) - %(author) %(subject)' | cut -d / -f 3- | awk -v YELLOW="$YELLOW" -v RESET="$RESET" -v CYAN="$CYAN" -v GREEN="$GREEN" -F" - " '{print YELLOW $1 RESET " - " CYAN $2 GREEN " " $3}')

if [[ -n "$EMAIL_FILTER" ]]; then
    results=$(echo "$results" | grep "$EMAIL_FILTER")
fi

echo "$results"